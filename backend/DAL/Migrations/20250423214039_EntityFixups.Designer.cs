// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PRegSys.DAL;

#nullable disable

namespace PRegSys.DAL.Migrations
{
    [DbContext(typeof(PregsysDbContext))]
    [Migration("20250423214039_EntityFixups")]
    partial class EntityFixups
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "und-u-ks-level2,und-u-ks-level2,icu,False")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PRegSys.DAL.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_evaluations");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_evaluations_teacher_id");

                    b.ToTable("evaluations", (string)null);
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("course");

                    b.Property<Instant>("Deadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_team_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_projects_owner_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.SignUpRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_sign_up_requests");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_sign_up_requests_student_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_sign_up_requests_team_id");

                    b.ToTable("sign_up_requests", (string)null);
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("integer")
                        .HasColumnName("evaluation_id");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<Instant>("SubmissionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_date");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_solutions");

                    b.HasIndex("EvaluationId")
                        .HasDatabaseName("ix_solutions_evaluation_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_solutions_project_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_solutions_team_id");

                    b.ToTable("solutions", (string)null);
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("LeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("LeaderId")
                        .HasDatabaseName("ix_teams_leader_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_teams_project_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username")
                        .UseCollation("case_insensitive");

                    b.Property<string>("user_type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<string>("user_type").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StudentTeam", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("integer")
                        .HasColumnName("students_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("StudentsId", "TeamId")
                        .HasName("pk_team_members");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_members_team_id");

                    b.ToTable("TeamMembers", (string)null);
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Student", b =>
                {
                    b.HasBaseType("PRegSys.DAL.Entities.User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Teacher", b =>
                {
                    b.HasBaseType("PRegSys.DAL.Entities.User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Evaluation", b =>
                {
                    b.HasOne("PRegSys.DAL.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_evaluations_teachers_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Project", b =>
                {
                    b.HasOne("PRegSys.DAL.Entities.Teacher", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_teachers_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.SignUpRequest", b =>
                {
                    b.HasOne("PRegSys.DAL.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sign_up_requests_students_student_id");

                    b.HasOne("PRegSys.DAL.Entities.Team", "Team")
                        .WithMany("SignUpRequests")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sign_up_requests_teams_team_id");

                    b.Navigation("Student");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Solution", b =>
                {
                    b.HasOne("PRegSys.DAL.Entities.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .HasConstraintName("fk_solutions_evaluations_evaluation_id");

                    b.HasOne("PRegSys.DAL.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solutions_projects_project_id");

                    b.HasOne("PRegSys.DAL.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solutions_teams_team_id");

                    b.Navigation("Evaluation");

                    b.Navigation("Project");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Team", b =>
                {
                    b.HasOne("PRegSys.DAL.Entities.Student", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_teams_students_leader_id");

                    b.HasOne("PRegSys.DAL.Entities.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_projects_project_id");

                    b.Navigation("Leader");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StudentTeam", b =>
                {
                    b.HasOne("PRegSys.DAL.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_students_students_id");

                    b.HasOne("PRegSys.DAL.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_teams_team_id");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Project", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PRegSys.DAL.Entities.Team", b =>
                {
                    b.Navigation("SignUpRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
